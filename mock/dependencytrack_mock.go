// Code generated by MockGen. DO NOT EDIT.
// Source: dependencytrack/dependencytrack.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDependencyTrackClient is a mock of DependencyTrackClient interface.
type MockDependencyTrackClient struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyTrackClientMockRecorder
}

// MockDependencyTrackClientMockRecorder is the mock recorder for MockDependencyTrackClient.
type MockDependencyTrackClientMockRecorder struct {
	mock *MockDependencyTrackClient
}

// NewMockDependencyTrackClient creates a new mock instance.
func NewMockDependencyTrackClient(ctrl *gomock.Controller) *MockDependencyTrackClient {
	mock := &MockDependencyTrackClient{ctrl: ctrl}
	mock.recorder = &MockDependencyTrackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependencyTrackClient) EXPECT() *MockDependencyTrackClientMockRecorder {
	return m.recorder
}

// AddTagsToProject mocks base method.
func (m *MockDependencyTrackClient) AddTagsToProject(ctx context.Context, projectName, projectVersion string, tags []string, namespace, serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToProject", ctx, projectName, projectVersion, tags, namespace, serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTagsToProject indicates an expected call of AddTagsToProject.
func (mr *MockDependencyTrackClientMockRecorder) AddTagsToProject(ctx, projectName, projectVersion, tags, namespace, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToProject", reflect.TypeOf((*MockDependencyTrackClient)(nil).AddTagsToProject), ctx, projectName, projectVersion, tags, namespace, serviceName)
}

// IsLatest mocks base method.
func (m *MockDependencyTrackClient) IsLatest(ctx context.Context, projectName, projectVersion string, updateTimestamp int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLatest", ctx, projectName, projectVersion, updateTimestamp)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLatest indicates an expected call of IsLatest.
func (mr *MockDependencyTrackClientMockRecorder) IsLatest(ctx, projectName, projectVersion, updateTimestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLatest", reflect.TypeOf((*MockDependencyTrackClient)(nil).IsLatest), ctx, projectName, projectVersion, updateTimestamp)
}

// UploadBOM mocks base method.
func (m *MockDependencyTrackClient) UploadBOM(ctx context.Context, projectName, projectVersion, parentName, parentVersion string, bom []byte, isLatest bool, group, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBOM", ctx, projectName, projectVersion, parentName, parentVersion, bom, isLatest, group, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBOM indicates an expected call of UploadBOM.
func (mr *MockDependencyTrackClientMockRecorder) UploadBOM(ctx, projectName, projectVersion, parentName, parentVersion, bom, isLatest, group, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBOM", reflect.TypeOf((*MockDependencyTrackClient)(nil).UploadBOM), ctx, projectName, projectVersion, parentName, parentVersion, bom, isLatest, group, description)
}
